extend type Query {
    claims: [Claim!] @guard @field(resolver: "App\\GraphQL\\Queries\\Claim\\ClaimsQuery")
}

extend type Mutation {
    createClaim(input: CreateClaimInput): CreateClaimPayload @field(resolver: "Claim\\CreateClaimMutation") @guard
    editClaim(input: EditClaimInput): EditClaimPayload @field(resolver: "Claim\\EditClaimMutation") @guard @can(ability: "update",  model: "App\\Claim\\Entity\\Claim", find: "input.id")
    deleteClaim(id: Int @rules(apply: ["required", "int", "exists:App\\Claim\\Entity\\Claim,id"])): DeleteClaimPayload @field(resolver: "Claim\\DeleteClaimMutation") @guard @can(ability: "delete",  model: "App\\Claim\\Entity\\Claim", find: "id")
}

input CreateClaimInput @validator(class: "Claim\\CreateClaimValidator") {
    name: String!
    number: String!
    files: [Upload!]
}

input EditClaimInput @validator(class: "Claim\\EditClaimValidator") {
    id: Int!
    name: String!
    number: String!
    files: [Upload!]
}

type CreateClaimPayload {
    id: Int
}

type EditClaimPayload {
    success: Boolean
}

type DeleteClaimPayload {
    success: Boolean
}

type Claim @model(class: "App\\Claim\\Entity\\Claim") {
    id: Int!
    name: String!
    number: String!
    files: [File!] @method(name: "files")
}

type File {
    name: String!
    mime: String @field(resolver: "App\\GraphQL\\Types\\Media\\FileType@mime")
    size: Int @field(resolver: "App\\GraphQL\\Types\\Media\\FileType@size")
    url: String! @field(resolver: "App\\GraphQL\\Types\\Media\\FileType@url")
}
